procedure Inspect.273 (Inspect.274, Inspect.272):
    let Inspect.313 : Str = CallByName Num.96 Inspect.272;
    let Inspect.312 : Str = CallByName Inspect.63 Inspect.274 Inspect.313;
    dec Inspect.313;
    ret Inspect.312;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.33 (Inspect.152):
    let Inspect.319 : Str = CallByName Inspect.5 Inspect.152;
    let Inspect.318 : Str = CallByName Inspect.64 Inspect.319;
    ret Inspect.318;

procedure Inspect.39 (Inspect.296):
    let Inspect.306 : Str = "";
    ret Inspect.306;

procedure Inspect.5 (Inspect.150):
    let Inspect.307 : I64 = CallByName Inspect.57 Inspect.150;
    let Inspect.304 : {} = Struct {};
    let Inspect.303 : Str = CallByName Inspect.39 Inspect.304;
    let Inspect.302 : Str = CallByName Inspect.273 Inspect.303 Inspect.307;
    ret Inspect.302;

procedure Inspect.57 (Inspect.272):
    let Inspect.308 : I64 = CallByName Inspect.30 Inspect.272;
    ret Inspect.308;

procedure Inspect.63 (Inspect.295, Inspect.291):
    let Inspect.315 : Str = CallByName Str.3 Inspect.295 Inspect.291;
    ret Inspect.315;

procedure Inspect.64 (Inspect.297):
    ret Inspect.297;

procedure Num.96 (#Attr.2):
    let Num.283 : Str = lowlevel NumToStr #Attr.2;
    ret Num.283;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.246 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.246;

procedure Test.0 ():
    let Test.6 : I64 = 1i64;
    let Test.7 : Str = CallByName Inspect.33 Test.6;
    dbg Test.7;
    dec Test.7;
    let Test.8 : Str = CallByName Inspect.33 Test.6;
    dbg Test.8;
    dec Test.8;
    let Test.9 : Str = CallByName Inspect.33 Test.6;
    dbg Test.9;
    dec Test.9;
    ret Test.6;
